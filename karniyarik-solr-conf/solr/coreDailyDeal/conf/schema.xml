<?xml version="1.0" encoding="UTF-8" ?>

<schema name="example" version="1.2">
  <types>

    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
<!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <fieldtype name="binary" class="solr.BinaryField"/>
    <fieldType name="uuid" class="solr.UUIDField" indexed="true" />
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />
    <fieldType name="commaDelimited" class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.PatternTokenizerFactory" pattern="[,]" />
      </analyzer>
	</fieldType>

    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
	    <analyzer type="index">
			<tokenizer class="com.karniyarik.ir.analyzer.ExtendedWhitespaceTokenizerFactorySolr"/>
	        <filter class="solr.StopFilterFactory"
	                ignoreCase="true"
	                words="stopwords.txt"
	                enablePositionIncrements="true"
	                />
	        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="1" splitOnCaseChange="1"/>
	        <filter class="com.karniyarik.ir.analyzer.KarniyarikLowercaseFilterFactorySolr"/>
			<filter class="com.karniyarik.ir.analyzer.ZemberekTokenFilterFactorySolr"/>
	    </analyzer>
	    <analyzer type="query">
			<tokenizer class="com.karniyarik.ir.analyzer.ExtendedWhitespaceTokenizerFactorySolr"/>
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
			<filter class="solr.StopFilterFactory"
	                ignoreCase="true"
	                words="stopwords.txt"
	                enablePositionIncrements="true"
	                />
	        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
	        <filter class="com.karniyarik.ir.analyzer.KarniyarikLowercaseFilterFactorySolr"/>
			<filter class="com.karniyarik.ir.analyzer.ZemberekTokenFilterFactorySolr"/>
	    </analyzer>
    </fieldType>


    <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="textgen" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>


    <!-- A general unstemmed text field that indexes tokens normally and also
         reversed (via ReversedWildcardFilterFactory), to enable more efficient 
	 leading wildcard queries. -->
    <fieldType name="text_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>
    
    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" /> 
 </types>

 <fields>
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a previously defined type from the 
       <types> section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     compressed: [false] if this field should be stored using gzip compression
       (this will only apply if the field type is compressable; among
       the standard field types, only TextField and StrField are)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     default: a value that should be used if no value is specified
       when adding a document.
   -->

   <field name="uuid" type="uuid" indexed="true" stored="true" default="NEW"/> 
   <field name="id" type="string" indexed="true" stored="true"/> 
   <field name="sku" type="textTight" indexed="true" stored="true" omitNorms="true"/>
   
   <field name="vertical" type="string" indexed="true" stored="false"/>
   <field name="name" type="text" indexed="true" stored="true" termVectors="true"/>
   <field name="breadcrumb" type="text" indexed="true" stored="true" termVectors="true"/>
   <field name="brand" type="string" indexed="true" stored="true"/>
   <field name="price"  type="double" indexed="true" stored="true"/>
   <field name="price_alternate"  type="double" indexed="true" stored="false"/>
   <field name="currency"  type="string" indexed="true" stored="true"/>
   <field name="source"  type="string" indexed="true" stored="true"/>
   <field name="product_url" type="string" indexed="true" stored="true"/>
   <field name="store_url"  type="string" indexed="false" stored="true"/>
   <field name="image_url"  type="string" indexed="false" stored="true"/>
   <field name="last_fetch_date"  type="tdate" indexed="true" stored="true"/>
   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="true"/>
   
   <field name="clustering"  type="string" indexed="false" stored="true" multiValued="true"/>
   <field name="keywords"  type="text" indexed="true" stored="false" multiValued="true" termVectors="true"/>
   <field name="spell"  type="text" indexed="true" stored="true" multiValued="true"/>
   
   <field name="city"  type="string" indexed="true" stored="true"/>
   <field name="district" type="string" indexed="true" stored="true"/>
   <field name="address" type="string" indexed="false" stored="true"/>
   <field name="description" type="string" indexed="false" stored="true"/>
   <field name="country"  type="string" indexed="true" stored="true"/>
   
   <!--thrash?-->
   <field name="cat" type="string" indexed="false" stored="false"/>
   <field name="tags" type="commaDelimited" indexed="true" stored="true" multiValued="true" termVectors="true"/>
   
   <!-- product fields -->
   <field name="inStock" type="boolean" indexed="true" stored="true" />
   
	<!--car fields -->
	<field name="modelyear"  type="int" indexed="true" stored="true"/>
	<field name="enginepower"  type="int" indexed="true" stored="true"/>
	<field name="enginevolume"  type="int" indexed="true" stored="true"/>
	<field name="km"  type="int" indexed="true" stored="true"/>
	<field name="fuel"  type="string" indexed="true" stored="true"/>
	<field name="color"  type="string" indexed="true" stored="true"/>
	<field name="gear"  type="string" indexed="true" stored="true"/>
	
	<!-- otel fields -->
	<field name="star"  type="int" indexed="true" stored="true"/>
	<field name="rating"  type="double" indexed="true" stored="true"/>
	<field name="longitude"  type="string" indexed="true" stored="true"/>
	<field name="latitude"  type="string" indexed="true" stored="true"/>
	<field name="zip"  type="string" indexed="true" stored="true"/>
	<field name="nr_rooms"  type="int" indexed="true" stored="true"/>
	
	<!-- estate fields -->
	<field name="warmingtype" type="string" indexed="true" stored="true"/>
	<field name="buildingtype" type="string" indexed="true" stored="true"/>
	<field name="roomcount" type="int" indexed="true" stored="true"/>
	<field name="floorcount" type="int" indexed="true" stored="true"/>
	<field name="salooncount" type="int" indexed="true" stored="true"/>
	<field name="area" type="int" indexed="true" stored="true"/>
	<field name="buildingage" type="int" indexed="true" stored="true"/>

	<!-- city deal fields -->
   <field name="startdate"  type="tdate" indexed="true" stored="true"/>
   <field name="enddate"  type="tdate" indexed="true" stored="true"/>
   

   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.  -->
   <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
   <!-- some trie-coded dynamic fields for faster range queries -->
   <dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>
   <dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>
   <dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_tdt" type="tdate"  indexed="true"  stored="true"/>
   <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
   <dynamicField name="attr_*" type="textgen" indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="random_*" type="random" />   
 </fields>

 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>keywords</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="AND"/>

	<copyField source="name" dest="keywords"/>
	<copyField source="brand" dest="keywords"/>
	<copyField source="breadcrumb" dest="keywords"/>
	<copyField source="tags" dest="keywords"/>
	<copyField source="city" dest="keywords"/>
	<copyField source="modelyear" dest="keywords"/>
	<copyField source="fuel" dest="keywords"/>
	<copyField source="color" dest="keywords"/>
	<copyField source="gear" dest="keywords"/>
	<copyField source="warmingtype" dest="keywords"/>
	<copyField source="buildingtype" dest="keywords"/>
	<copyField source="country" dest="keywords"/>
	<copyField source="city" dest="keywords"/>
	<copyField source="district" dest="keywords"/>
	
	<copyField source="name" dest="spell"/>
	<copyField source="brand" dest="spell"/>
	<copyField source="breadcrumb" dest="spell"/>
	<copyField source="tags" dest="spell"/>
	<copyField source="city" dest="spell"/>
	<copyField source="fuel" dest="spell"/>
	<copyField source="color" dest="spell"/>
	<copyField source="gear" dest="spell"/>
	<copyField source="warmingtype" dest="spell"/>
	<copyField source="buildingtype" dest="spell"/>
	<copyField source="city" dest="spell"/>
	<copyField source="district" dest="spell"/>
	
	<copyField source="name" dest="clustering"/>
	<copyField source="brand" dest="clustering"/>
	<copyField source="breadcrumb" dest="clustering"/>
	<copyField source="city" dest="clustering"/>
	<copyField source="fuel" dest="clustering"/>
	<copyField source="color" dest="clustering"/>
	<copyField source="district" dest="clustering"/>
	
 <!-- Similarity is the scoring routine for each document vs. a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
 <!-- ... OR ...
      Specify a SimilarityFactory class name implementation
      allowing parameters to be used.
 -->
 <!--
 <similarity class="com.example.solr.CustomSimilarityFactory">
   <str name="paramkey">param value</str>
 </similarity>
 -->

</schema>
